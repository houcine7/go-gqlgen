package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"fmt"
	"log"

	"github.com/houcine7/graphql-server/graph/model"
	jwt "github.com/houcine7/graphql-server/internal/auth"
	auth "github.com/houcine7/graphql-server/internal/middleware"
	"github.com/houcine7/graphql-server/internal/models/links"
	"github.com/houcine7/graphql-server/internal/models/users"
)

// CreateLink is the resolver for the createLink field.
func (r *mutationResolver) CreateLink(ctx context.Context, input model.NewLink) (*model.Link, error) {	
	// authenticated users can create links
	user := auth.ForContext(ctx)
	if user == nil {
		return &model.Link{}, fmt.Errorf("access denied")
	}
	link := model.Link{
		Title: input.Title,
		Address: input.Address,
		User: &model.User{
			Username: user.Username,
		},
	}
	// DB things 
	var linkToSave links.Link
	linkToSave.Title= input.Title
	linkToSave.Address = input.Address
	linkToSave.User = user
	var generatedId int64 =  linkToSave.Save()
	fmt.Println(generatedId)
	return &link,nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (string, error) {
	var user users.User
	user.Username = input.Username
	user.Password = input.Password
	user.Create()
	 
	token,err := jwt.GenerateToken(user.Username)

	if err!=nil{
		return "",err
	}
	return token,nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.Login) (string, error) {
	
	var user = users.User{
		Username: input.Username,
		Password:input.Password,
	}

	ok,err :=user.Authenticate()
	if !ok{
		return "",err
	}

	token,err:= jwt.GenerateToken(user.Username)

	if err!=nil {
		fmt.Print("Error generating the token",err)
		return "",fmt.Errorf("something went wrong")
	}

	return token,nil

}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, input *model.RefreshToken) (string, error) {
	username,err := jwt.ParseToken(input.Token)
	if err!=nil{
		log.Print("Error while parsing",err)
		return "",fmt.Errorf("access denied")
	}

	token,err := jwt.GenerateToken(username)
	if err!=nil{
		log.Print("Error generating token",err)
		return "",err
	}
	return token,nil



}

// Links is the resolver for the links field.
func (r *queryResolver) Links(ctx context.Context, last *int) ([]*model.Link, error) {
	
	fetchedLinks, err := links.Links()
	if err!=nil{
		log.Fatal(err)
	}

	var responseLinks []*model.Link
	for _,link := range(fetchedLinks) {
		responseLinks= append(responseLinks, &model.Link{
			Address: link.Address,
			ID: link.ID,
			Title: link.Title,
			User: &model.User{
				ID: link.User.ID,
				Username: link.User.Username,
			},
		})
	}
	return responseLinks,nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
